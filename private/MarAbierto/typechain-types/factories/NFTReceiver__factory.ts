/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { NFTReceiver, NFTReceiverInterface } from "../NFTReceiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nftAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052604051610682380380610682833981810160405281019061002591906100c5565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506100f2565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009282610067565b9050919050565b6100a281610087565b81146100ad57600080fd5b50565b6000815190506100bf81610099565b92915050565b6000602082840312156100db576100da610062565b5b60006100e9848285016100b0565b91505092915050565b60805160601c61056c6101166000396000818160a201526101fb015261056c6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631249c58b14610046578063150b7a02146100505780635bf8633a14610080575b600080fd5b61004e61009e565b005b61006a60048036038101906100659190610320565b6101e4565b60405161007791906103e3565b60405180910390f35b6100886101f9565b604051610095919061040d565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1647636a62784260e01b306040516024016100f1919061040d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161015b91906104a2565b60006040518083038185875af1925050503d8060008114610198576040519150601f19603f3d011682016040523d82523d6000602084013e61019d565b606091505b50509050806101e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d890610516565b60405180910390fd5b50565b600063150b7a0260e01b905095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061025282610227565b9050919050565b61026281610247565b811461026d57600080fd5b50565b60008135905061027f81610259565b92915050565b6000819050919050565b61029881610285565b81146102a357600080fd5b50565b6000813590506102b58161028f565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126102e0576102df6102bb565b5b8235905067ffffffffffffffff8111156102fd576102fc6102c0565b5b602083019150836001820283011115610319576103186102c5565b5b9250929050565b60008060008060006080868803121561033c5761033b61021d565b5b600061034a88828901610270565b955050602061035b88828901610270565b945050604061036c888289016102a6565b935050606086013567ffffffffffffffff81111561038d5761038c610222565b5b610399888289016102ca565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6103dd816103a8565b82525050565b60006020820190506103f860008301846103d4565b92915050565b61040781610247565b82525050565b600060208201905061042260008301846103fe565b92915050565b600081519050919050565b600081905092915050565b60005b8381101561045c578082015181840152602081019050610441565b8381111561046b576000848401525b50505050565b600061047c82610428565b6104868185610433565b935061049681856020860161043e565b80840191505092915050565b60006104ae8284610471565b915081905092915050565b600082825260208201905092915050565b7f4e465452656365697665723a206d696e74206661696c65640000000000000000600082015250565b60006105006018836104b9565b915061050b826104ca565b602082019050919050565b6000602082019050818103600083015261052f816104f3565b905091905056fea26469706673582212203b10b7e230a6d2c39ed02aa603efb733771acb737c33ff3b9c5e088e0267a4b264736f6c63430008080033";

type NFTReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTReceiver__factory extends ContractFactory {
  constructor(...args: NFTReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _nftAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTReceiver> {
    return super.deploy(_nftAddress, overrides || {}) as Promise<NFTReceiver>;
  }
  override getDeployTransaction(
    _nftAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_nftAddress, overrides || {});
  }
  override attach(address: string): NFTReceiver {
    return super.attach(address) as NFTReceiver;
  }
  override connect(signer: Signer): NFTReceiver__factory {
    return super.connect(signer) as NFTReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTReceiverInterface {
    return new utils.Interface(_abi) as NFTReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTReceiver {
    return new Contract(address, _abi, signerOrProvider) as NFTReceiver;
  }
}
